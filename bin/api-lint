#!/usr/bin/env node

const fs = require('fs');
const vusion = require('vusion-api');
const YAML = require('yaml');

const argv = require('minimist')(process.argv.slice(2));
let components;

if (argv._[0]) {
    components = argv._[0].split(',').map((name) => ({ name }));
} else {
    components = fs.readdirSync('src/components').filter((file) => file.endsWith('.vue')).map((name) => ({ name: name.replace(/\.vue$/, '') }));
}

const ATTR_ORDER = ['name', 'title', 'type', 'sync', 'model', 'options', 'default', 'description', 'advanced'];
const genObjectFromOrder = (order) => {
    const obj = {};
    order.forEach((key) => obj[key] = undefined);
    return obj;
};
const clearObject = (obj) => {
    Object.keys(obj).forEach((key) => {
        if (obj[key] === undefined)
            delete obj[key];
    });
};

components.forEach((component) => {
    const apiFilePath = `./src/components/${component.name}.vue/api.yaml`;
    if (!fs.existsSync(apiFilePath))
        return;

    const content = fs.readFileSync(apiFilePath, 'utf8');

    let json;
    try {
        json = YAML.parse(content);
    } catch (e) {
        vusion.cli.error(`解析 ${apiFilePath} 出错！`);
        console.error(e);
        return;
    }
    json.forEach((comp) => {
        if (comp.attrs) {
            comp.attrs.forEach((attr, index) => {
                const newAttr = genObjectFromOrder(ATTR_ORDER);
                Object.keys(attr).forEach((key) => {
                    newAttr[key] = attr[key];
                });
                clearObject(newAttr);
                comp.attrs[index] = newAttr;
            });
        }
    });

    fs.writeFileSync(apiFilePath, YAML.stringify(json), 'utf8');
    vusion.cli.done(`已整理 ${apiFilePath}`);
});
